local WIDTH = tonumber(sys.get_config("display.width"))
local HEIGHT = tonumber(sys.get_config("display.height"))

local TOUCH = hash("touch")


local function create_bunny(self, position, speed)
	table.insert(self.bunnies, { id = factory.create("#factory", position), speed = speed })
end

function init(self)
	self.bunnies = {}
	math.randomseed(os.time())
	for i=1,100 do
		create_bunny(self, vmath.vector3(math.random(1, WIDTH), math.random(HEIGHT * 0.8 / 2, HEIGHT * 1.2 / 2), 0), vmath.vector3(0, 0, 0))
	end
	
	msg.post(".", "acquire_input_focus")
	
	self.frame_count = 0
	self.fps_start = socket.gettime()
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	local bunnies = self.bunnies
	local get_position = go.get_position
	local set_position = go.set_position
	for i=1,#bunnies do
		local bunny = bunnies[i]
		local id = bunny.id

		local speed = bunny.speed
		speed.y = speed.y - 500 * dt

		local pos = get_position(id)
		pos.x = pos.x + speed.x * dt
		pos.y = pos.y + speed.y * dt
		
		if pos.x < 0 then
			pos.x = -pos.x
			speed.x = -speed.x
		elseif pos.x > WIDTH then
			pos.x = 640 - (pos.x - WIDTH)
			speed.x = -speed.x 
		end
		if pos.y < 0 then
			pos.y = -pos.y
			speed.y = -speed.y
		end
		
		set_position(pos, id)
	end
	
	self.frame_count = self.frame_count + 1
	local fps = self.frame_count / (socket.gettime() - self.fps_start)
	msg.post("@render:", "draw_text", { text = ("Bunnies: %d FPS: %d"):format(#self.bunnies, fps), position = vmath.vector3(10, HEIGHT - 10, 0) } )

end

function on_input(self, action_id, action)
	if action_id == TOUCH and action.released then
		for i=1,100 do
			create_bunny(self, vmath.vector3(action.x, action.y, 1), vmath.vector3(math.random(-100, 100), math.random(-50, 0), 0))
		end
		self.frame_count = 0
		self.fps_start = socket.gettime()
		print(#self.bunnies)
	end
    -- Add input-handling code here
    -- Remove this function if not needed
end

function on_reload(self)
    -- Add reload-handling code here
    -- Remove this function if not needed
end
