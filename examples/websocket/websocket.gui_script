local simple_input = require "modules.simple_input"
local websocket = require "websocket"
local websocket_async = require "websocket.client_async"

local function log(...)
	local text = ""
	local len = select("#", ...)
	for i=1,len  do
		text = text .. tostring(select(i, ...)) .. (i == len and "" or ", ")
	end
	
	print(text)
	local node = gui.get_node("log")
	gui.set_text(node, gui.get_text(node) .. "\n" .. text)
end

function init(self)
	simple_input.acquire()
	
	simple_input.register(gui.get_node("echo/bg"), function()
		log("echo")
		local wsc = websocket.client.new({ timeout = 1})
		log("Websocket client created", wsc)
		pprint(wsc)
		
		local ok, err = wsc:connect("ws://echo.websocket.org", "echo")
		if not ok then
			log("Could not connect", err)
		else
			log("Websocket connected")
			local message_to_send = 'sending to echo server'
			local ok, was_clean, code, reason = wsc:send(message_to_send)
			log("Sending '" .. message_to_send .. "'", ok, was_clean, code, reason)
			
			local message, opcode, was_clean, code, reason = wsc:receive()
			log("Received '" .. tostring(message) .. "'", opcode, was_clean, code, reason)
		end
		
		log("Closing websocket")
		wsc:close()
	end)
	
	
	
	
	simple_input.register(gui.get_node("send_async/bg"), function()
		if not self.wsc_async then
			log("creating async")
			self.wsc_async = websocket_async()
			self.wsc_async:on_message(function(message)
				log("on_message", message)
			end)
			self.wsc_async:on_connected(function(ok, err)
				log("on connected", ok, err)
			end)
			self.wsc_async:connect("ws://echo.websocket.org", "echo")
		else
			local message_to_send = 'sending to echo server'
			local ok, was_clean, code, reason = self.wsc_async:send(message_to_send)
			log("Sending '" .. message_to_send .. "'", ok, was_clean, code, reason)
		end
	end)
end

function final(self)
	simple_input.release()
end

function update(self, dt)
	if self.wsc_async then
		self.wsc_async.step()
	end
end

function on_input(self, action_id, action)
	simple_input.on_input(action_id, action)
end
