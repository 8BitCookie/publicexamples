local simple_input = require "modules.simple_input"

local function callback(self, webview_id, request_id, type, data)
	print("callback", webview_id, request_id, type, data)
	pprint(data)
	if type == webview.CALLBACK_RESULT_URL_OK then
		print("CALLBACK_RESULT_URL_OK")
		webview.set_visible(webview_id, 1)
	elseif type == webview.CALLBACK_RESULT_URL_ERROR then
		print("CALLBACK_RESULT_URL_ERROR")
	elseif type == webview.CALLBACK_RESULT_EVAL_OK then
		print("CALLBACK_RESULT_EVAL_OK")
	elseif type == webview.CALLBACK_RESULT_EVAL_ERROR then
		print("CALLBACK_RESULT_EVAL_ERROR")
	else
		print("other type", type)
	end
end

function init(self)
	simple_input.acquire()

	simple_input.register("showad/bg", function()
		print("fooo")
		if not self.wid then
			self.wid = webview.create(callback)
		end
		--local html = sys.load_resource("/examples/webview_ads/assets/millenial.html")
		--local html = sys.load_resource("/examples/webview_ads/assets/smaato.html")
		--local html = sys.load_resource("/examples/webview_ads/assets/leadbolt.html")
		--local html = sys.load_resource("/examples/webview_ads/assets/ima2.html")
		local html = sys.load_resource("/examples/webview_ads/assets/empty.html")
		self.rid = webview.open_raw(self.wid, html, {hidden = true})
		--rid = webview.open(wid, "http://www.google.com", {hidden = true})
	end)

	iac.set_listener(function(self, payload, type)
		local url = payload["url"]
		print("iac listener", url)
		if string.match(url, "/webview/close") then
			print("close webview")
			if self.wid then
				webview.destroy(self.wid)
				self.wid = nil
			end
		end
	end)
end

function final(self)
	simple_input.release()
	webview.destroy(self.wid)
end

function on_input(self, action_id, action)
	simple_input.on_input(action_id, action)
end
